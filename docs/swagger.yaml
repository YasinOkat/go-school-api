basePath: /
definitions:
  models.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  models.LoginInput:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  models.StudentCourse:
    properties:
      courseID:
        type: integer
      courseName:
        type: string
      studentID:
        type: integer
      username:
        type: string
    required:
    - studentID
    - username
    type: object
  models.StudentCourseSelect:
    properties:
      courseID:
        type: integer
      studentID:
        type: integer
    required:
    - courseID
    - studentID
    type: object
  models.StudentRead:
    properties:
      id:
        type: integer
      majorID:
        type: integer
      status:
        type: boolean
      userID:
        type: integer
    type: object
  models.StudentUserCreate:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      majorID:
        type: integer
      password:
        type: string
      phone_number:
        type: string
      status:
        type: boolean
      user_type_id:
        $ref: '#/definitions/models.UserTypeID'
      username:
        type: string
    required:
    - majorID
    type: object
  models.TokenResponse:
    properties:
      token:
        type: string
    type: object
  models.User:
    properties:
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      password:
        type: string
      phone_number:
        type: string
      status:
        type: boolean
      user_type_id:
        $ref: '#/definitions/models.UserTypeID'
      username:
        type: string
    type: object
  models.UserCreate:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
      phone_number:
        type: string
      status:
        type: boolean
      user_type_id:
        $ref: '#/definitions/models.UserTypeID'
      username:
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    - phone_number
    - user_type_id
    - username
    type: object
  models.UserTypeID:
    enum:
    - 3
    - 2
    - 1
    type: integer
    x-enum-varnames:
    - Admin
    - Lecturer
    - Student
host: localhost:3002
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample school management server.
  license:
    name: GPL 3.0
    url: https://www.gnu.org/licenses/gpl-3.0.en.html
  termsOfService: http://swagger.io/terms/
  title: School Management API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login with username and password
      parameters:
      - description: Login
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/models.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TokenResponse'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Login to get a JWT token
      tags:
      - auth
  /students:
    post:
      consumes:
      - application/json
      description: Create a new user with the input payload
      parameters:
      - description: Create Student
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.StudentUserCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.StudentUserCreate'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "409":
          description: username already exists
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Create a new student
      tags:
      - students
  /students/:
    get:
      description: Fetch All students
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.StudentRead'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Fetch all students
      tags:
      - students
  /students/{id}/courses:
    get:
      description: Get student courses
      parameters:
      - description: Student ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.StudentCourse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: student not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get student courses
      tags:
      - students
  /students/courses:
    post:
      consumes:
      - application/json
      description: Select a course for a student if the course matches the student's
        major
      parameters:
      - description: Select Course
        in: body
        name: studentCourse
        required: true
        schema:
          $ref: '#/definitions/models.StudentCourseSelect'
      produces:
      - application/json
      responses:
        "200":
          description: course selected successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: student does not exist
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "409":
          description: course does not match student's major
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Select a course for a student
      tags:
      - students
  /users:
    post:
      consumes:
      - application/json
      description: Create a new user with the input payload
      parameters:
      - description: Create User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.UserCreate'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "409":
          description: username already exists
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Create a new user
      tags:
      - users
  /users/:
    get:
      description: Fetch All users
      parameters:
      - description: Filter by active users
        in: query
        name: active
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Fetch all users
      tags:
      - users
  /users/{id}:
    delete:
      description: Delete a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: user not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Delete a user
      tags:
      - users
    get:
      description: Get a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: user not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get a user
      tags:
      - users
swagger: "2.0"
